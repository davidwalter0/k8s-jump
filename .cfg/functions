#!/bin/bash
# set -o errexit
set -o nounset
set -o pipefail
# The next incarnation will use a git repo pulled into the
# jenkins home

# volumes mapped from git repo

# These scripts assume a directory structure on the target of
# under the jenkins home of 
# .../
#         /.cfg    # secrets [ until we get k8s secrets + vault ]
#         /bin     # kubectl or other binaries
#         /k8s     # yaml configs
#         /scripts # this script and collections of other helpers

function check
{
    if [[ ! ${dir:-} ]]; then
        echo "dir: variable not set"
        echo "A recipe in the script sourcing this file may work:"
        echo "dir=\$(readlink -f \$(dirname \$(readlink -f \${0}))/..)"
        exit 3
    fi
}

check
mkdir -p ${dir}/.cfg  ${dir}/.private
chmod 700 ${dir} ${dir}/.cfg ${dir}/.private

if [[ ! -e ${dir}/.cfg/options ]]; then
    echo Unconfigured options [.cfg/options]
    exit 3
fi

. ${dir}/.cfg/options

if ! [[ -e ${kubeconfig} ]]; then
    printf "k8s username: ";
    read -r username
    printf "${username}'s password: " ;
    read -sr password
    export username=${username}
    export password=${password}
    ${kubectl} config --kubeconfig=${kubeconfig} set-cluster k8s --server=https://${master}:443 \
               --insecure-skip-tls-verify=true
    ${kubectl} config --kubeconfig=${kubeconfig} set-credentials cluster-admin \
               --username=${username} --password=${password}
    ${kubectl} config --kubeconfig=${kubeconfig} set-context k8s --cluster=k8s --user=cluster-admin
    ${kubectl} config --kubeconfig=${kubeconfig} use-context k8s
fi

export kubectl="${kubectl} --kubeconfig=${kubeconfig}"
if [[ -e ${make_yaml_file} ]]; then
    . ${make_yaml_file}
fi
if [[ ! -e ${make_yaml_file} || ! ${make-yaml:-} ]]; then
    echo "Required function make-yaml is not defined"
    echo "It's simplest form could be cat of the yaml file."
    echo "Any function that dumps the yaml on stdout, such as a sed stream edit may also be used."
    exit 3
fi

function start
{
    generate
    ${kubectl} create -f- <<EOF
$(make-yaml)
EOF

}

function stop
{
    ${kubectl} delete -f- <<EOF
$(make-yaml)
EOF
}

function status
{
    ${kubectl} get --output=wide node
    ${kubectl} get --all-namespaces --output=wide rc,pods,svc,ep
}

function generate
{
    rm -f ${yaml}
    if (( debug )); then
        echo "building yaml file ${yaml} for debugging"
        if [[ ! -e ${yaml} ]]; then
            make-yaml > ${yaml}
        fi
        chmod 600 ${yaml}
    fi
}

function main
{
    if (( $# )) ; then
        # set flags prior to calling any methods
        for arg in ${@}; do
            case ${arg} in
                --debug)
                    debug=1
                    ;;
                --verbose)
                    verbose=1
                    ;;
            esac
        done
        for arg in ${@}; do
            case ${arg} in
                --debug|--verbose) # ignore these, don't generate a usage call
                    ;;
                --start)
                    start
                    ;;
                --stop)
                    stop
                    ;;
                --status)
                    status
                    ;;
                *)
                    usage
            esac
        done
    else
        usage
    fi
    exit
}

. ${dir}/.cfg/usage
